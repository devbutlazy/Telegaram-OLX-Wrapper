from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.utils.markdown import hbold
from aiogram.utils.keyboard import InlineKeyboardBuilder
from routers.handler import CustomCallback

from database import user_tags, get_user_tags, create_user

router = Router()


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await create_user(message.from_user.id, message.chat.id)
    await message.answer(
        f"üá∫üá∏ {hbold(message.from_user.full_name)}, Welcome to OLX Wrapper.\n"
        f"How can I assist you?",
        reply_markup=(
            InlineKeyboardBuilder()
            .button(
                text="‚ùì Information", callback_data=CustomCallback(data="information")
            )
            .as_markup()
        ),
    )


@router.message(Command("test"))
async def test_handler(message: Message) -> None:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="#1",
        callback_data=CustomCallback(data="1"),
    )
    builder.button(
        text="#2",
        callback_data=CustomCallback(data="2"),
    )

    await message.answer("test?", reply_markup=builder.as_markup())


@router.message(Command("help"))
async def help_handler(message: Message) -> None:
    await message.answer(
        "üîß –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤.\n\n"
        "/add_tag -  üü¢ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥\n"
        "/remove_tag - üî¥ –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥\n"
        "/view_tags - üü° –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ—ó—Ö —Ç–µ–≥—ñ–≤\n",
    )


@router.message(Command("add_tag"))
async def add_tag_handler(message: Message) -> None:
    tag: list = message.text.split(maxsplit=1)
    if len(tag) <= 1:
        return await message.answer(
            "‚ùì –Ø–∫ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥?\n" 'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/add_tag —ñ–≥—Ä–æ–≤–∏–π –ø–∫"'
        )

    tags = await get_user_tags(message.from_user.id)

    print(tags)
    print(len(tags))
    if len(tags) >= 1:
        return await message.answer("‚ùóÔ∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 1-–≥–æ —Ç–µ–≥—É!\n")

    if tag[1] in tags:
        return await message.answer("‚ùóÔ∏è –¢–∞–∫–∏–π —Ç–µ–≥ –≤–∂–µ —î –≤ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É!\n")

    tags.append(tag[1])

    await user_tags.update_one(
        {"user_id": message.from_user.id}, {"$set": {"tags": tags}}, upsert=True
    )

    await message.answer(
        f'üü¢ –¢–µ–≥ "#{tag[1]}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö\n'
        "‚ùì –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–æ —Ü—ñ–π —Ç–µ–º—ñ, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥—ñ—à–ª–µ –≤–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!\n"
    )


@router.message(Command("remove_tag"))
async def remove_tag_handler(message: Message) -> None:
    tag: list = message.text.split(maxsplit=1)
    if len(tag) <= 1:
        return await message.answer(
            "‚ùì –Ø–∫ –¥–æ–¥–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥?\n" 'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/remove_tag —ñ–≥—Ä–æ–≤–∏–π –ø–∫"'
        )

    tags = await get_user_tags(message.from_user.id)

    if len(tags) < 1:
        return await message.answer("‚ùóÔ∏è –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤!\n")

    if tag[1] not in tags:
        return await message.answer("‚ùóÔ∏è –¶—å–æ–≥–æ —Ç–µ–≥—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É!\n")

    tags.remove(tag[1])
    await user_tags.update_one(
        {"user_id": message.from_user.id}, {"$set": {"tags": tags}}, upsert=True
    )

    await message.answer(
        f'üü¢ –¢–µ–≥ "#{tag[1]}" —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–±—Ä–∞–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n'
        "‚ùì –ë–æ—Ç –±—ñ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Å–∏–ª–∞—Ç–∏–º–µ –≤–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ —Ü—ñ–π —Ç–µ–º—ñ!\n"
    )


@router.message(Command("view_tags"))
async def view_tags_handler(message: Message) -> None:
    tags = await get_user_tags(message.from_user.id)

    tags_list = "\n".join(f"#{tag}" for tag in tags)

    await message.answer(
        f"üü° –í–∞—à—ñ —Ç–µ–≥–∏:\n{tags_list}"
        if tags is not None
        else "‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤!"
    )


# print("New item found")

# print("Link: ", f"{MAIN_SITE}{element.get('href')}")
# print("Title:", element.find("h6", class_="css-16v5mdi er34gjf0").text)

# if parsed_info.find("h3", class_="css-12vqlj3"):
#     print("Price:", parsed_info.find("h3", class_="css-12vqlj3").text)

# if element.find("span", class_="css-3lkihg"):
#     print("State:", element.find("span", class_="css-3lkihg").text)

# print(
#     "Location:", element.find("p", class_="css-1a4brun er34gjf0").text
# )
# print(
#     "User: ",
#     parsed_info.find("h4", class_="css-1lcz6o7 er34gjf0").text,
#     " | ",
#     parsed_info.find("p", class_="css-b5m1rv er34gjf0").text,
# )

# print(parsed_info.find("span", class_="css-12hdxwj er34gjf0").text)
# print("-" * 20)