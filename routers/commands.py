import logging

from aiogram import Router
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold

from api.donatello import Donatello
from api.scrapper import get_last_id
from database import (
    users,
    get_user_tags,
    create_user,
    get_premium_status,
    IsBlacklist,
    regions
)
from routers.handler import CustomCallback

router = Router()
logger = logging.getLogger("aiogram")


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    Startup command, to add user to database and give information about the bot.

    Params:
    - message: Message - Telegram message
    """

    await create_user(message.from_user.id, message.chat.id)
    await message.answer(
        f"<a href='https://i.ibb.co/HnWmXcG/olxwrappermain.jpg'>üá∫üá¶</a>{hbold(message.from_user.full_name)}, –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ OLX Wrapper.\n"
        f"–Ø–∫ —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
        reply_markup=(
            InlineKeyboardBuilder()
            .button(text="‚ùì –î–µ—Ç–∞–ª—ñ", callback_data=CustomCallback(data="information"))
            .as_markup()
        ),
    )


@router.message(Command("help"), IsBlacklist())
async def help_handler(message: Message) -> None:
    """
    A command to view the list of available commands.

    Params:
    - message: Message - Telegram message
    """

    await message.answer(
        "<a href='https://i.ibb.co/VSJWPkC/image.jpg'>üîß</a><b>–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤.</b>\n\n"
        "/add_tag -  –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥ (1 - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, 3 - –ø—Ä–µ–º—ñ—É–º)\n"
        "/remove_tag - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥\n"
        "/view_tags - –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ—ó—Ö —Ç–µ–≥—ñ–≤\n"
        "/premium - –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å/–ø—Ä–∏–¥–±–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–µ–º—ñ—É–º\n"
        "/price_range - –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–ü—Ä–µ–º—ñ—É–º)\n\n"
        "/location - –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –ª–æ–∫–∞—Ü—ñ—î—é (–ü—Ä–µ–º—ñ—É–º)",
        parse_mode="html",
    )


@router.message(Command("add_tag"), IsBlacklist())
async def add_tag_handler(message: Message, command: CommandObject) -> Message:
    """
    A command to add a new tag to database. (using update_one)
    ~ text.split(maxsplit=1) - split the message into two parts (function call and tag)
    + Free plan == 1 tag
    + Premium plan == 3 tags

    Params:
    - message: Message - Telegram message
    - command: CommandObject - Telegram command
    """

    tag: str = command.args
    if not tag:
        return await message.answer(
            "<a href='https://i.ibb.co/mNS3nt1/image.jpg'>‚ùì</a> <b>–Ø–∫ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥?</b>\n"
            'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/add_tag —ñ–≥—Ä–æ–≤–∏–π –ø–∫"',
            parse_mode="html",
        )

    tags = await get_user_tags(message.from_user.id)

    limit = 3 if await get_premium_status(message.from_user.id) else 1

    if len(tags) >= limit:
        if limit == 1:
            return await message.answer(
                f"<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ {limit} —Ç–µ–≥—É(—ñ–≤)</b>\n"
                f"üí∞ –ü—Ä–∏–¥–±–∞–π—Ç–µ –ø—Ä–µ–º—ñ—É–º, —â–æ–± –∑–±—ñ–ª—å—à–∏—Ç–∏ –ª—ñ–º—ñ—Ç (/premium)",
                parse_mode="html",
            )
        return await message.answer(
            f"<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ {limit} —Ç–µ–≥—É(—ñ–≤)</b>\n",
            parse_mode="html",
        )

    if tag in tags:
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–¢–∞–∫–∏–π —Ç–µ–≥ –≤–∂–µ —î –≤ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É</b>\n",
            parse_mode="html",
        )

    loading = await message.answer(
        "<a href='https://i.ibb.co/VSJWPkC/image.jpg'>‚ùì</a><b>–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é...</b>\n"
    )

    last_id = await get_last_id(tag)
    tags.append({tag: last_id})
    await users.update_one(
        {"user_id": message.from_user.id},
        {"$set": {"tags": tags}},
        upsert=True,
    )

    await loading.edit_text(
        f'<a href="https://i.ibb.co/LC64mF3/image.jpg">üü¢</a> <b>–¢–µ–≥ "#{tag}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö</b>\n'
        f"‚ùì –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–æ —Ü—ñ–π —Ç–µ–º—ñ, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥—ñ—à–ª–µ –≤–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è! (–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {len(tags)} –∑ {limit} —Ç–µ–≥—ñ–≤)\n",
        parse_mode="html",
    )


@router.message(Command("remove_tag"), IsBlacklist())
async def remove_tag_handler(message: Message, command: CommandObject) -> Message:
    """
    A command to delete a tag from the database. (using update_one)
    ~ text.split(maxsplit=1) - split the message into two parts (function call and tag)

    Params:
    - message: Message - Telegram message
    - command: CommandObject - Telegram command
    """
    limit = 3 if await get_premium_status(message.from_user.id) else 1

    tag_arg: str = command.args
    if not tag_arg:
        return await message.answer(
            "<a href='https://i.ibb.co/mNS3nt1/image.jpg'>‚ùì</a> <b>–Ø–∫ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥?</b>\n"
            'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/remove_tag —ñ–≥—Ä–æ–≤–∏–π –ø–∫"',
            parse_mode="html",
        )

    user_tags = await get_user_tags(message.from_user.id)

    tag_dict = [
        t_dict for t_dict in user_tags for tag in t_dict.keys() if tag == tag_arg
    ][0]
    tag_name = list(tag_dict.keys())[0]

    if len(user_tags) < 1:
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤</b>\n",
            parse_mode="html",
        )

    if tag_arg not in tag_name:
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–¢–∞–∫–æ–≥–æ —Ç–µ–≥—É –Ω–µ–º–∞—î –≤ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É</b>\n",
            parse_mode="html",
        )

    user_tags.remove(tag_dict)
    await users.update_one(
        {"user_id": message.from_user.id}, {"$set": {"tags": user_tags}}, upsert=True
    )

    await message.answer(
        f'<a href="https://i.ibb.co/LC64mF3/image.jpg">üü¢</a> <b>–¢–µ–≥ "#{tag_arg}" —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–±—Ä–∞–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–Ω–∏—Ö.</b>\n'
        f"‚ùì –¢–µ–ø–µ—Ä –±–æ—Ç –Ω–µ –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ —Ü—ñ–π —Ç–µ–º—ñ! (–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {len(user_tags)} –∑ {limit} —Ç–µ–≥—ñ–≤)\n",
        parse_mode="html",
    )


@router.message(Command("view_tags"), IsBlacklist())
async def view_tags_handler(message: Message) -> None:
    """
    A command to view user tags from database (using get_user_tags function).

    Params:
    - message: Message - Telegram message
    - command: CommandObject - Telegram command
    """

    tags = await get_user_tags(message.from_user.id)

    tags_list = "\n".join(f"#{tag_name}" for tag in tags for tag_name in tag.keys())

    await message.answer(
        (
            f"<a href='https://i.ibb.co/GQgnRsb/image.jpg'>‚ùì</a> <b>–í–∞—à—ñ —Ç–µ–≥–∏ ({len(tags)}):</b>\n{tags_list}"
            if tags
            else "<a href='https://i.ibb.co/GQgnRsb/image.jpg'>‚ùóÔ∏è</a> <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤</b>"
        ),
        parse_mode="html",
    )


@router.message(Command("premium"), IsBlacklist())
async def premium_command_handler(message: Message) -> None:
    """
    A command to view premium status.

    Params:
    - message: Message - Telegram message
    - command: CommandObject - Telegram command
    """

    premium_status = await get_premium_status(message.from_user.id)
    if premium_status:
        text = (
            "<b><a href='https://i.ibb.co/y8C33Yj/image.jpg'>‚úÖ</a> –í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ OLX Wrapper Pro</b>\n"
            "<b>‚ùó –¢–µ–ø–µ—Ä —É –≤–∞—Å –∑–±—ñ–ª—å—à–µ–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–æ —Ç—Ä—å–æ—Ö —Ç–µ–≥—ñ–≤ —Ç–∞ –¥–æ–¥–∞–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω!</b>"
        )
        reply_markup = None
    else:
        text = (
            "<a href='https://i.ibb.co/y8C33Yj/image.jpg'>‚ùå</a> <b>–í–∏ —â–µ –Ω–µ –ø—Ä–∏–¥–±–∞–ª–∏ OLX Wrapper Pro</b>\n"
            "‚ùì –ü—ñ—Å–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º—É, —É –≤–∞—Å –±—É–¥–µ –∑–±—ñ–ª—å—à–µ–Ω–∏–π –ª—ñ–º—ñ—Ç —Ç–µ–≥—ñ–≤ (–¥–æ —Ç—Ä—å–æ—Ö) —Ç–∞ –¥–æ–¥–∞–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å "
            "–Ω–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω–∏!\n"
            "üí∞ –í–∞—Ä—ñ—Å—Ç—å: 100–≥—Ä–Ω"
        )
        reply_markup = InlineKeyboardBuilder().button(
            text="üí∞ –ü—Ä–∏–¥–±–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º",
            url=await Donatello.get_donate_url(
                message.from_user.full_name, message.from_user.id
            ),
        )
    await message.answer(
        text=text,
        parse_mode="html",
        reply_markup=reply_markup.as_markup() if reply_markup else None,
    )


@router.message(Command("price_range"), IsBlacklist())
async def price_range_handler(message: Message, command: CommandObject) -> Message:
    """
    A command to add a user to the blacklist.

    Params:
    - message: Message - Telegram message
    - command: CommandObject - Telegram command
    """

    limit = 3 if await get_premium_status(message.from_user.id) else 1
    user_tags = await get_user_tags(message.from_user.id)

    if not await get_premium_status(message.from_user.id):
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è "
            "- /premium)</b>",
            parse_mode="html",
        )

    if not user_tags:
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤</b>",
            parse_mode="html",
        )

    if not command.args:
        return await message.answer(
            "<a href='https://i.ibb.co/mNS3nt1/image.jpg'>‚ùì</a> <b>–Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω?</b>\n"
            'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/price_range 10 100 (–¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É –ø–µ—Ä–µ–¥–∞–π—Ç–µ 0 —Ç–∞ 0)"',
            parse_mode="html",
        )

    min_price, max_price = command.args.split()

    try:
        await users.update_one(
            {"user_id": int(message.from_user.id)},
            {
                "$set": {
                    "min_amount": int(min_price),
                    "max_amount": int(max_price),
                }
            },
            upsert=True,
        )
        if min_price == 0 and max_price == 0:
            text = "–§—ñ–ª—å—Ç—Ä —Ü—ñ–Ω–∏ –≤–∏–º–∫–Ω–µ–Ω–∏–π."
        else:
            text = f"–¢–µ–ø–µ—Ä —Ç–µ–º–∏ –±—É–¥—É—Ç—å —Ñ—ñ–ª—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∑ —Ü—ñ–Ω–∞–º–∏ –≤—ñ–¥ {int(min_price)}–≥—Ä–Ω –¥–æ {int(max_price)}–≥—Ä–Ω"

        await message.answer(
            f'<a href="https://i.ibb.co/LC64mF3/image.jpg">‚úÖ</a> <b>{text}</b>\n'
            f"‚ùì (–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {len(user_tags)} –∑ {limit} —Ç–µ–≥—ñ–≤)\n",
            parse_mode="html",
        )

    except BaseException as error:
        logger.error(f"Error: {error}")
        await message.answer(
            text=(
                f"<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–ú–æ–∂–ª–∏–≤–æ –≤–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É!</b>"
                f"\nüîµ –ü—Ä–∏–∫–ª–∞–¥: <b>/price_range 10 100</b>"
            ),
            parse_mode="html",
        )


@router.message(Command("location"), IsBlacklist())
async def location_handler(message: Message, command: CommandObject) -> Message:
    """
    A command to add a user to the blacklist.

    Params:
    - message: Message - Telegram message
    - command: CommandObject - Telegram command
    """

    user_tags = await get_user_tags(message.from_user.id)

    if not await get_premium_status(message.from_user.id):
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è "
            "- /premium)</b>",
            parse_mode="html",
        )

    if not user_tags:
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùóÔ∏è</a> <b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤</b>",
            parse_mode="html",
        )

    if not command.args:
        return await message.answer(
            "<a href='https://i.ibb.co/mNS3nt1/image.jpg'>‚ùì</a> <b>–Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –ª–æ–∫–∞—Ü—ñ—î—é?</b>\n"
            'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/location –í—ñ–Ω–Ω–∏—Ü—è" (<b>–í–∏–º–∫–Ω—É—Ç–∏</b> –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è)',
            parse_mode="html",
        )

    if command.args.capitalize().strip() == "–í–∏–º–∫–Ω—É—Ç–∏":
        await users.update_one(
            {"user_id": int(message.from_user.id)},
            {
                "$set": {
                    "location": "",
                }
            },
            upsert=True,
        )
        return await message.answer(
            "<a href='https://i.ibb.co/LC64mF3/image.jpg'>‚úÖ</a> <b>–§—ñ–ª—å—Ç—Ä –∑–∞ –ª–æ–∫–∞—Ü—ñ—î—é –≤–∏–º–∫–Ω–µ–Ω–æ</b>",
            parse_mode="html",
        )

    if not command.args.capitalize().strip() in regions:
        return await message.answer(
            "<a href='https://shorturl.at/svIT4'>‚ùó</a> <b>–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç!</b>\n"
            f"‚ùì <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è</b>: {', '.join(regions)}\n –ê–±–æ <b>–í–∏–º–∫–Ω—É—Ç–∏</b> –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è",
            parse_mode="html"
        )

    await users.update_one(
        {"user_id": int(message.from_user.id)},
        {
            "$set": {
                "location": command.args.capitalize().strip(),
            }
        },
        upsert=True,
    )
    await message.answer(
        f"<a href='https://i.ibb.co/LC64mF3/image.jpg'>‚úÖ</a> "
        f"<b>–§—ñ–ª—å—Ç—Ä –∑–∞ –ª–æ–∫–∞—Ü—ñ—î—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {command.args.capitalize().strip()}</b>",
        parse_mode="html",
    )
