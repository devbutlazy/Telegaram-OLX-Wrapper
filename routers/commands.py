from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.utils.markdown import hbold
from aiogram.utils.keyboard import InlineKeyboardBuilder
from routers.handler import CustomCallback

from database import (
    user_tags,
    get_user_tags,
    create_user,
    get_premium_status,
    DONATELLO_URL,
)
from api.scrapper import get_last_id
from api.donatello import donatello

router = Router()


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    Startup command, to add user to database and give information about the bot.

    Params:
    - message: Message - Telegram message
    """

    await create_user(message.from_user.id, message.chat.id)
    await message.answer(
        f"üá∫üá¶ {hbold(message.from_user.full_name)}, –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ OLX Wrapper.\n"
        f"–Ø–∫ —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
        reply_markup=(
            InlineKeyboardBuilder()
            .button(text="‚ùì –î–µ—Ç–∞–ª—ñ", callback_data=CustomCallback(data="information"))
            .as_markup()
        ),
    )


@router.message(Command("help"))
async def help_handler(message: Message) -> None:
    """
    A command to view the list of available commands.

    Params:
    - message: Message - Telegram message
    """

    await message.answer(
        "üîß <b>–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤.</b>\n\n"
        "/add_tag -  –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥\n"
        "/remove_tag - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥\n"
        "/view_tags - –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ—ó—Ö —Ç–µ–≥—ñ–≤\n",
        parse_mode="html",
    )


@router.message(Command("add_tag"))
async def add_tag_handler(message: Message) -> None:
    """
    A command to add a new tag to database. (using update_one)
    ~ text.split(maxsplit=1) - split the message into two parts (function call and tag)
    + Free plan == 1 tag
    + Premium plan == 3 tags

    Params:
    - message: Message - Telegram message
    """

    tag: list = message.text.split(maxsplit=1)
    if len(tag) <= 1:
        return await message.answer(
            "‚ùì –Ø–∫ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥?\n" 'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/add_tag —ñ–≥—Ä–æ–≤–∏–π –ø–∫"',
            parse_mode="html",
        )

    tags = await get_user_tags(message.from_user.id)

    if len(tags) >= 1:
        return await message.answer(
            "‚ùóÔ∏è <b>–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 1-–≥–æ —Ç–µ–≥—É</b>\n", parse_mode="html"
        )

    if tag[1] in tags:
        return await message.answer(
            "‚ùóÔ∏è <b>–¢–∞–∫–∏–π —Ç–µ–≥ –≤–∂–µ —î –≤ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É</b>\n", parse_mode="html"
        )

    tags.append(tag[1])

    last_id = await get_last_id(tag[1])

    await user_tags.update_one(
        {"user_id": message.from_user.id},
        {"$set": {"tags": tags, "last_id": last_id}},
        upsert=True,
    )

    await message.answer(
        f'üü¢ <b>–¢–µ–≥ "#{tag[1]}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö</b>\n'
        "‚ùì –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–æ —Ü—ñ–π —Ç–µ–º—ñ, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥—ñ—à–ª–µ –≤–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!\n",
        parse_mode="html",
    )


@router.message(Command("remove_tag"))
async def remove_tag_handler(message: Message) -> None:
    """
    A command to delete a tag from database. (using update_one)
    ~ text.split(maxsplit=1) - split the message into two parts (function call and tag)

    Params:
    - message: Message - Telegram message
    """

    tag: list = message.text.split(maxsplit=1)
    if len(tag) <= 1:
        return await message.answer(
            "‚ùì –Ø–∫ –¥–æ–¥–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥?\n" 'üîµ –ü—Ä–∏–∫–ª–∞–¥: "/remove_tag —ñ–≥—Ä–æ–≤–∏–π –ø–∫"',
            parse_mode="html",
        )

    tags = await get_user_tags(message.from_user.id)

    if len(tags) < 1:
        return await message.answer(
            "‚ùóÔ∏è <b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤</b>\n", parse_mode="html"
        )

    if tag[1] not in tags:
        return await message.answer(
            "‚ùóÔ∏è <b>–¶—å–æ–≥–æ —Ç–µ–≥—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É</b>\n", parse_mode="html"
        )

    tags.remove(tag[1])
    await user_tags.update_one(
        {"user_id": message.from_user.id}, {"$set": {"tags": tags}}, upsert=True
    )

    await message.answer(
        f'üü¢ <b>–¢–µ–≥ "#{tag[1]}" —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–±—Ä–∞–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</b>\n'
        "‚ùì –ë–æ—Ç –±—ñ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Å–∏–ª–∞—Ç–∏–º–µ –≤–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ —Ü—ñ–π —Ç–µ–º—ñ!\n",
        parse_mode="html",
    )


@router.message(Command("view_tags"))
async def view_tags_handler(message: Message) -> None:
    """
    A command to view user tags from database (using get_user_tags function).

    Params:
    - message: Message - Telegram message
    """

    tags = await get_user_tags(message.from_user.id)

    tags_list = "\n".join(f"#{tag}" for tag in tags)

    await message.answer(
        (
            f"‚ùì <b>–í–∞—à—ñ —Ç–µ–≥–∏:</b>\n{tags_list}"
            if tags
            else "‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤</b>"
        ),
        parse_mode="html",
    )


@router.message(Command("premium"))
async def premium_command_handler(message: Message) -> None:
    """
    A command to view premium status.

    Params:
    - message: Message - Telegram message
    """

    premium_status = await get_premium_status(message.from_user.id)
    if premium_status:
        text = (
            "<b>‚úîÔ∏è –í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ OLX Wrapper Pro</b>\n"
            "<b>‚ùó –¢–µ–ø–µ—Ä —É –≤–∞—Å –∑–±—ñ–ª—å—à–µ–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–æ —Ç—Ä—å–æ—Ö —Ç–µ–≥—ñ–≤!</b>"
        )
    else:
        text = (
            "<b>‚ùå –í–∏ —â–µ –Ω–µ –ø—Ä–∏–¥–±–∞–ª–∏ OLX Wrapper Pro</b>\n"
            "‚ùì –ü—ñ—Å–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º—É, —É –≤–∞—Å –±—É–¥–µ –∑–±—ñ–ª—å—à–µ–Ω–∏–π –ª—ñ–º—ñ—Ç —Ç–µ–≥—ñ–≤ (–¥–æ —Ç—Ä—å–æ—Ö)!\n"
            "üí∞ –í–∞—Ä—ñ—Å—Ç—å: 100–≥—Ä–Ω"
        )
        reply_markup = InlineKeyboardBuilder().button(
            text="üí∞ –ü—Ä–∏–¥–±–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º", url=await donatello.get_donate_url(message.from_user.full_name, message.from_user.id)
        )

    await message.answer(
        text=text,
        parse_mode="html",
        reply_markup=reply_markup.as_markup() if reply_markup else None,
    )
